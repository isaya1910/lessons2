1. Самый лучший способ избежать многих ошибочный состояний и багов это использовать строгую типизацию и паттерт  
 Parse, do not validate.

Например есть PhoneNumber,  обычно он представлен стрингом и когда мы принимает этот 
PhoneNumber от клиента мы валидируем его через validate функцию. Такой подход считается не надежным, что если при создании другого метода где 
мы принимаем phone программист забудет добавить валидацию?

 Гораздо круче будет сделать тип PhoneNumber с возможностью его инициализации только через Builder функцию.

В этом примере мы парсим какое то значение string, и возвращаем ошибку если оно не проваледирован в Builder функцие.

type Phone string

func NewPhone(phoneString string) (*Phone, error) {
	err := validatePhoneNumber(phoneString)
	if err != nil {
		return nil, err
	}
	phone := Phone(phoneString)
	return &phone, nil
}


в данном случае тип Phone можно создать только через NewPhone, она возратит либо сам тип, либо значение об ошибке.

Теперь в любых местах в нашем коде использую phone, мы можем быть уверен что он проваледирован и не возникнет ошибочных состояний связанные с ним.


Также отличными примерами является Email-ы, денежные суммы, валюты, месяцы и тд.

